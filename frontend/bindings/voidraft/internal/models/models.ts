// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * AppConfig 应用配置 - 按照前端设置页面分类组织
 */
export class AppConfig {
    /**
     * 通用设置
     */
    "general": GeneralConfig;

    /**
     * 编辑设置
     */
    "editing": EditingConfig;

    /**
     * 外观设置
     */
    "appearance": AppearanceConfig;

    /**
     * 更新设置
     */
    "updates": UpdatesConfig;

    /**
     * Git备份设置
     */
    "backup": GitBackupConfig;

    /**
     * 配置元数据
     */
    "metadata": ConfigMetadata;

    /** Creates a new AppConfig instance. */
    constructor($$source: Partial<AppConfig> = {}) {
        if (!("general" in $$source)) {
            this["general"] = (new GeneralConfig());
        }
        if (!("editing" in $$source)) {
            this["editing"] = (new EditingConfig());
        }
        if (!("appearance" in $$source)) {
            this["appearance"] = (new AppearanceConfig());
        }
        if (!("updates" in $$source)) {
            this["updates"] = (new UpdatesConfig());
        }
        if (!("backup" in $$source)) {
            this["backup"] = (new GitBackupConfig());
        }
        if (!("metadata" in $$source)) {
            this["metadata"] = (new ConfigMetadata());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): AppConfig {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType1;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType3;
        const $$createField4_0 = $$createType4;
        const $$createField5_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("general" in $$parsedSource) {
            $$parsedSource["general"] = $$createField0_0($$parsedSource["general"]);
        }
        if ("editing" in $$parsedSource) {
            $$parsedSource["editing"] = $$createField1_0($$parsedSource["editing"]);
        }
        if ("appearance" in $$parsedSource) {
            $$parsedSource["appearance"] = $$createField2_0($$parsedSource["appearance"]);
        }
        if ("updates" in $$parsedSource) {
            $$parsedSource["updates"] = $$createField3_0($$parsedSource["updates"]);
        }
        if ("backup" in $$parsedSource) {
            $$parsedSource["backup"] = $$createField4_0($$parsedSource["backup"]);
        }
        if ("metadata" in $$parsedSource) {
            $$parsedSource["metadata"] = $$createField5_0($$parsedSource["metadata"]);
        }
        return new AppConfig($$parsedSource as Partial<AppConfig>);
    }
}

/**
 * AppearanceConfig 外观设置配置
 */
export class AppearanceConfig {
    /**
     * 界面语言
     */
    "language": LanguageType;

    /**
     * 系统界面主题
     */
    "systemTheme": SystemThemeType;

    /**
     * 当前选择的预设主题名称
     */
    "currentTheme": string;

    /** Creates a new AppearanceConfig instance. */
    constructor($$source: Partial<AppearanceConfig> = {}) {
        if (!("language" in $$source)) {
            this["language"] = ("" as LanguageType);
        }
        if (!("systemTheme" in $$source)) {
            this["systemTheme"] = ("" as SystemThemeType);
        }
        if (!("currentTheme" in $$source)) {
            this["currentTheme"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppearanceConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): AppearanceConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppearanceConfig($$parsedSource as Partial<AppearanceConfig>);
    }
}

/**
 * Git备份相关类型定义
 *
 * AuthMethod 定义Git认证方式
 */
export enum AuthMethod {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 认证方式
     */
    Token = "token",
    SSHKey = "ssh_key",
    UserPass = "user_pass",
};

/**
 * ConfigMetadata 配置元数据
 */
export class ConfigMetadata {
    /**
     * 最后更新时间
     */
    "lastUpdated": string;

    /**
     * 配置版本号
     */
    "version": string;

    /** Creates a new ConfigMetadata instance. */
    constructor($$source: Partial<ConfigMetadata> = {}) {
        if (!("lastUpdated" in $$source)) {
            this["lastUpdated"] = "";
        }
        if (!("version" in $$source)) {
            this["version"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ConfigMetadata instance from a string or object.
     */
    static createFrom($$source: any = {}): ConfigMetadata {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ConfigMetadata($$parsedSource as Partial<ConfigMetadata>);
    }
}

/**
 * Document represents a document in the system
 */
export class Document {
    "id": number;
    "title": string;
    "content": string;
    "createdAt": string;
    "updatedAt": string;
    "is_deleted": boolean;

    /**
     * 锁定标志，锁定的文档无法被删除
     */
    "is_locked": boolean;

    /** Creates a new Document instance. */
    constructor($$source: Partial<Document> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("content" in $$source)) {
            this["content"] = "";
        }
        if (!("createdAt" in $$source)) {
            this["createdAt"] = "";
        }
        if (!("updatedAt" in $$source)) {
            this["updatedAt"] = "";
        }
        if (!("is_deleted" in $$source)) {
            this["is_deleted"] = false;
        }
        if (!("is_locked" in $$source)) {
            this["is_locked"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Document instance from a string or object.
     */
    static createFrom($$source: any = {}): Document {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Document($$parsedSource as Partial<Document>);
    }
}

/**
 * EditingConfig 编辑设置配置
 */
export class EditingConfig {
    /**
     * 字体设置
     * 字体大小
     */
    "fontSize": number;

    /**
     * 字体族
     */
    "fontFamily": string;

    /**
     * 字体粗细
     */
    "fontWeight": string;

    /**
     * 行高
     */
    "lineHeight": number;

    /**
     * Tab设置
     * 是否启用Tab缩进
     */
    "enableTabIndent": boolean;

    /**
     * Tab大小
     */
    "tabSize": number;

    /**
     * Tab类型（空格或Tab）
     */
    "tabType": TabType;

    /**
     * 保存选项
     * 自动保存延迟（毫秒）
     */
    "autoSaveDelay": number;

    /** Creates a new EditingConfig instance. */
    constructor($$source: Partial<EditingConfig> = {}) {
        if (!("fontSize" in $$source)) {
            this["fontSize"] = 0;
        }
        if (!("fontFamily" in $$source)) {
            this["fontFamily"] = "";
        }
        if (!("fontWeight" in $$source)) {
            this["fontWeight"] = "";
        }
        if (!("lineHeight" in $$source)) {
            this["lineHeight"] = 0;
        }
        if (!("enableTabIndent" in $$source)) {
            this["enableTabIndent"] = false;
        }
        if (!("tabSize" in $$source)) {
            this["tabSize"] = 0;
        }
        if (!("tabType" in $$source)) {
            this["tabType"] = ("" as TabType);
        }
        if (!("autoSaveDelay" in $$source)) {
            this["autoSaveDelay"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EditingConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): EditingConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EditingConfig($$parsedSource as Partial<EditingConfig>);
    }
}

/**
 * Extension 单个扩展配置
 */
export class Extension {
    /**
     * 扩展唯一标识
     */
    "id": ExtensionID;

    /**
     * 是否启用
     */
    "enabled": boolean;

    /**
     * 是否为默认扩展
     */
    "isDefault": boolean;

    /**
     * 扩展配置项
     */
    "config": ExtensionConfig;

    /** Creates a new Extension instance. */
    constructor($$source: Partial<Extension> = {}) {
        if (!("id" in $$source)) {
            this["id"] = ("" as ExtensionID);
        }
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }
        if (!("isDefault" in $$source)) {
            this["isDefault"] = false;
        }
        if (!("config" in $$source)) {
            this["config"] = ({} as ExtensionConfig);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Extension instance from a string or object.
     */
    static createFrom($$source: any = {}): Extension {
        const $$createField3_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("config" in $$parsedSource) {
            $$parsedSource["config"] = $$createField3_0($$parsedSource["config"]);
        }
        return new Extension($$parsedSource as Partial<Extension>);
    }
}

/**
 * ExtensionConfig 扩展配置项
 */
export type ExtensionConfig = { [_: string]: any };

/**
 * ExtensionID 扩展标识符
 */
export enum ExtensionID {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 编辑增强扩展
     * 彩虹括号
     */
    ExtensionRainbowBrackets = "rainbowBrackets",

    /**
     * 超链接
     */
    ExtensionHyperlink = "hyperlink",

    /**
     * 颜色选择器
     */
    ExtensionColorSelector = "colorSelector",
    ExtensionFold = "fold",
    ExtensionTextHighlight = "textHighlight",

    /**
     * 选择框
     */
    ExtensionCheckbox = "checkbox",

    /**
     * 划词翻译
     */
    ExtensionTranslator = "translator",

    /**
     * UI增强扩展
     * 小地图
     */
    ExtensionMinimap = "minimap",

    /**
     * 工具扩展
     * 搜索功能
     */
    ExtensionSearch = "search",

    /**
     * 核心扩展
     * 编辑器核心功能
     */
    ExtensionEditor = "editor",
};

/**
 * GeneralConfig 通用设置配置
 */
export class GeneralConfig {
    /**
     * 窗口是否置顶
     */
    "alwaysOnTop": boolean;

    /**
     * 数据存储路径
     */
    "dataPath": string;

    /**
     * 是否启用系统托盘
     */
    "enableSystemTray": boolean;

    /**
     * 开机启动设置
     */
    "startAtLogin": boolean;

    /**
     * 窗口吸附设置
     * 是否启用窗口吸附功能（阈值现在是自适应的）
     */
    "enableWindowSnap": boolean;

    /**
     * 全局热键设置
     * 是否启用全局热键
     */
    "enableGlobalHotkey": boolean;

    /**
     * 全局热键组合
     */
    "globalHotkey": HotkeyCombo;

    /**
     * 界面设置
     * 是否启用加载动画
     */
    "enableLoadingAnimation": boolean;

    /**
     * 是否启用标签页模式
     */
    "enableTabs": boolean;

    /** Creates a new GeneralConfig instance. */
    constructor($$source: Partial<GeneralConfig> = {}) {
        if (!("alwaysOnTop" in $$source)) {
            this["alwaysOnTop"] = false;
        }
        if (!("dataPath" in $$source)) {
            this["dataPath"] = "";
        }
        if (!("enableSystemTray" in $$source)) {
            this["enableSystemTray"] = false;
        }
        if (!("startAtLogin" in $$source)) {
            this["startAtLogin"] = false;
        }
        if (!("enableWindowSnap" in $$source)) {
            this["enableWindowSnap"] = false;
        }
        if (!("enableGlobalHotkey" in $$source)) {
            this["enableGlobalHotkey"] = false;
        }
        if (!("globalHotkey" in $$source)) {
            this["globalHotkey"] = (new HotkeyCombo());
        }
        if (!("enableLoadingAnimation" in $$source)) {
            this["enableLoadingAnimation"] = false;
        }
        if (!("enableTabs" in $$source)) {
            this["enableTabs"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GeneralConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GeneralConfig {
        const $$createField6_0 = $$createType8;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("globalHotkey" in $$parsedSource) {
            $$parsedSource["globalHotkey"] = $$createField6_0($$parsedSource["globalHotkey"]);
        }
        return new GeneralConfig($$parsedSource as Partial<GeneralConfig>);
    }
}

/**
 * GitBackupConfig Git备份配置
 */
export class GitBackupConfig {
    "enabled": boolean;
    "repo_url": string;
    "auth_method": AuthMethod;
    "username"?: string;
    "password"?: string;
    "token"?: string;
    "ssh_key_path"?: string;
    "ssh_key_passphrase"?: string;

    /**
     * 分钟
     */
    "backup_interval": number;
    "auto_backup": boolean;

    /** Creates a new GitBackupConfig instance. */
    constructor($$source: Partial<GitBackupConfig> = {}) {
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }
        if (!("repo_url" in $$source)) {
            this["repo_url"] = "";
        }
        if (!("auth_method" in $$source)) {
            this["auth_method"] = ("" as AuthMethod);
        }
        if (!("backup_interval" in $$source)) {
            this["backup_interval"] = 0;
        }
        if (!("auto_backup" in $$source)) {
            this["auto_backup"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GitBackupConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GitBackupConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new GitBackupConfig($$parsedSource as Partial<GitBackupConfig>);
    }
}

/**
 * GiteaConfig Gitea配置
 */
export class GiteaConfig {
    /**
     * Gitea服务器URL
     */
    "baseURL": string;

    /**
     * 仓库所有者
     */
    "owner": string;

    /**
     * 仓库名称
     */
    "repo": string;

    /** Creates a new GiteaConfig instance. */
    constructor($$source: Partial<GiteaConfig> = {}) {
        if (!("baseURL" in $$source)) {
            this["baseURL"] = "";
        }
        if (!("owner" in $$source)) {
            this["owner"] = "";
        }
        if (!("repo" in $$source)) {
            this["repo"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GiteaConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GiteaConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new GiteaConfig($$parsedSource as Partial<GiteaConfig>);
    }
}

/**
 * GithubConfig GitHub配置
 */
export class GithubConfig {
    /**
     * 仓库所有者
     */
    "owner": string;

    /**
     * 仓库名称
     */
    "repo": string;

    /** Creates a new GithubConfig instance. */
    constructor($$source: Partial<GithubConfig> = {}) {
        if (!("owner" in $$source)) {
            this["owner"] = "";
        }
        if (!("repo" in $$source)) {
            this["repo"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GithubConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GithubConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new GithubConfig($$parsedSource as Partial<GithubConfig>);
    }
}

/**
 * HotkeyCombo 热键组合定义
 */
export class HotkeyCombo {
    /**
     * Ctrl键
     */
    "ctrl": boolean;

    /**
     * Shift键
     */
    "shift": boolean;

    /**
     * Alt键
     */
    "alt": boolean;

    /**
     * Win键
     */
    "win": boolean;

    /**
     * 主键（如 'X', 'F1' 等）
     */
    "key": string;

    /** Creates a new HotkeyCombo instance. */
    constructor($$source: Partial<HotkeyCombo> = {}) {
        if (!("ctrl" in $$source)) {
            this["ctrl"] = false;
        }
        if (!("shift" in $$source)) {
            this["shift"] = false;
        }
        if (!("alt" in $$source)) {
            this["alt"] = false;
        }
        if (!("win" in $$source)) {
            this["win"] = false;
        }
        if (!("key" in $$source)) {
            this["key"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new HotkeyCombo instance from a string or object.
     */
    static createFrom($$source: any = {}): HotkeyCombo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new HotkeyCombo($$parsedSource as Partial<HotkeyCombo>);
    }
}

/**
 * KeyBinding 单个快捷键绑定
 */
export class KeyBinding {
    /**
     * 快捷键动作
     */
    "command": KeyBindingCommand;

    /**
     * 所属扩展
     */
    "extension": ExtensionID;

    /**
     * 快捷键组合（如 "Mod-f", "Ctrl-Shift-p"）
     */
    "key": string;

    /**
     * 是否启用
     */
    "enabled": boolean;

    /**
     * 是否为默认快捷键
     */
    "isDefault": boolean;

    /** Creates a new KeyBinding instance. */
    constructor($$source: Partial<KeyBinding> = {}) {
        if (!("command" in $$source)) {
            this["command"] = ("" as KeyBindingCommand);
        }
        if (!("extension" in $$source)) {
            this["extension"] = ("" as ExtensionID);
        }
        if (!("key" in $$source)) {
            this["key"] = "";
        }
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }
        if (!("isDefault" in $$source)) {
            this["isDefault"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new KeyBinding instance from a string or object.
     */
    static createFrom($$source: any = {}): KeyBinding {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new KeyBinding($$parsedSource as Partial<KeyBinding>);
    }
}

/**
 * KeyBindingCommand 快捷键命令
 */
export enum KeyBindingCommand {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 搜索扩展相关
     * 显示搜索
     */
    ShowSearchCommand = "showSearch",

    /**
     * 隐藏搜索
     */
    HideSearchCommand = "hideSearch",

    /**
     * 搜索切换大小写
     */
    SearchToggleCaseCommand = "searchToggleCase",

    /**
     * 搜索切换整词
     */
    SearchToggleWordCommand = "searchToggleWord",

    /**
     * 搜索切换正则
     */
    SearchToggleRegexCommand = "searchToggleRegex",

    /**
     * 显示替换
     */
    SearchShowReplaceCommand = "searchShowReplace",

    /**
     * 替换全部
     */
    SearchReplaceAllCommand = "searchReplaceAll",

    /**
     * 代码块扩展相关
     * 块内选择全部
     */
    BlockSelectAllCommand = "blockSelectAll",

    /**
     * 在当前块后添加新块
     */
    BlockAddAfterCurrentCommand = "blockAddAfterCurrent",

    /**
     * 在最后添加新块
     */
    BlockAddAfterLastCommand = "blockAddAfterLast",

    /**
     * 在当前块前添加新块
     */
    BlockAddBeforeCurrentCommand = "blockAddBeforeCurrent",

    /**
     * 跳转到上一个块
     */
    BlockGotoPreviousCommand = "blockGotoPrevious",

    /**
     * 跳转到下一个块
     */
    BlockGotoNextCommand = "blockGotoNext",

    /**
     * 选择上一个块
     */
    BlockSelectPreviousCommand = "blockSelectPrevious",

    /**
     * 选择下一个块
     */
    BlockSelectNextCommand = "blockSelectNext",

    /**
     * 删除当前块
     */
    BlockDeleteCommand = "blockDelete",

    /**
     * 向上移动当前块
     */
    BlockMoveUpCommand = "blockMoveUp",

    /**
     * 向下移动当前块
     */
    BlockMoveDownCommand = "blockMoveDown",

    /**
     * 删除行
     */
    BlockDeleteLineCommand = "blockDeleteLine",

    /**
     * 向上移动行
     */
    BlockMoveLineUpCommand = "blockMoveLineUp",

    /**
     * 向下移动行
     */
    BlockMoveLineDownCommand = "blockMoveLineDown",

    /**
     * 字符转置
     */
    BlockTransposeCharsCommand = "blockTransposeChars",

    /**
     * 格式化代码块
     */
    BlockFormatCommand = "blockFormat",

    /**
     * 复制
     */
    BlockCopyCommand = "blockCopy",

    /**
     * 剪切
     */
    BlockCutCommand = "blockCut",

    /**
     * 粘贴
     */
    BlockPasteCommand = "blockPaste",

    /**
     * 代码折叠扩展相关
     * 折叠代码
     */
    FoldCodeCommand = "foldCode",

    /**
     * 展开代码
     */
    UnfoldCodeCommand = "unfoldCode",

    /**
     * 折叠全部
     */
    FoldAllCommand = "foldAll",

    /**
     * 展开全部
     */
    UnfoldAllCommand = "unfoldAll",

    /**
     * 通用编辑扩展相关
     * 光标按语法左移
     */
    CursorSyntaxLeftCommand = "cursorSyntaxLeft",

    /**
     * 光标按语法右移
     */
    CursorSyntaxRightCommand = "cursorSyntaxRight",

    /**
     * 按语法选择左侧
     */
    SelectSyntaxLeftCommand = "selectSyntaxLeft",

    /**
     * 按语法选择右侧
     */
    SelectSyntaxRightCommand = "selectSyntaxRight",

    /**
     * 向上复制行
     */
    CopyLineUpCommand = "copyLineUp",

    /**
     * 向下复制行
     */
    CopyLineDownCommand = "copyLineDown",

    /**
     * 插入空行
     */
    InsertBlankLineCommand = "insertBlankLine",

    /**
     * 选择行
     */
    SelectLineCommand = "selectLine",

    /**
     * 选择父级语法
     */
    SelectParentSyntaxCommand = "selectParentSyntax",

    /**
     * 减少缩进
     */
    IndentLessCommand = "indentLess",

    /**
     * 增加缩进
     */
    IndentMoreCommand = "indentMore",

    /**
     * 缩进选择
     */
    IndentSelectionCommand = "indentSelection",

    /**
     * 光标到匹配括号
     */
    CursorMatchingBracketCommand = "cursorMatchingBracket",

    /**
     * 切换注释
     */
    ToggleCommentCommand = "toggleComment",

    /**
     * 切换块注释
     */
    ToggleBlockCommentCommand = "toggleBlockComment",

    /**
     * 插入新行并缩进
     */
    InsertNewlineAndIndentCommand = "insertNewlineAndIndent",

    /**
     * 向后删除字符
     */
    DeleteCharBackwardCommand = "deleteCharBackward",

    /**
     * 向前删除字符
     */
    DeleteCharForwardCommand = "deleteCharForward",

    /**
     * 向后删除组
     */
    DeleteGroupBackwardCommand = "deleteGroupBackward",

    /**
     * 向前删除组
     */
    DeleteGroupForwardCommand = "deleteGroupForward",

    /**
     * 历史记录扩展相关
     * 撤销
     */
    HistoryUndoCommand = "historyUndo",

    /**
     * 重做
     */
    HistoryRedoCommand = "historyRedo",

    /**
     * 撤销选择
     */
    HistoryUndoSelectionCommand = "historyUndoSelection",

    /**
     * 重做选择
     */
    HistoryRedoSelectionCommand = "historyRedoSelection",

    /**
     * 文本高亮扩展相关
     * 切换文本高亮
     */
    TextHighlightToggleCommand = "textHighlightToggle",
};

/**
 * LanguageType 语言类型定义
 */
export enum LanguageType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * LangZhCN 中文简体
     */
    LangZhCN = "zh-CN",

    /**
     * LangEnUS 英文-美国
     */
    LangEnUS = "en-US",
};

/**
 * SystemThemeType 系统主题类型定义
 */
export enum SystemThemeType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * SystemThemeDark 深色系统主题
     */
    SystemThemeDark = "dark",

    /**
     * SystemThemeLight 浅色系统主题
     */
    SystemThemeLight = "light",

    /**
     * SystemThemeAuto 跟随系统主题
     */
    SystemThemeAuto = "auto",
};

/**
 * TabType 定义了制表符类型
 */
export enum TabType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * TabTypeSpaces 使用空格作为制表符
     */
    TabTypeSpaces = "spaces",

    /**
     * TabTypeTab 使用Tab作为制表符
     */
    TabTypeTab = "tab",
};

/**
 * Theme 主题数据库模型
 */
export class Theme {
    "id": number;
    "name": string;
    "type": ThemeType;
    "colors": ThemeColorConfig;
    "isDefault": boolean;
    "createdAt": string;
    "updatedAt": string;

    /** Creates a new Theme instance. */
    constructor($$source: Partial<Theme> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = ("" as ThemeType);
        }
        if (!("colors" in $$source)) {
            this["colors"] = (new ThemeColorConfig());
        }
        if (!("isDefault" in $$source)) {
            this["isDefault"] = false;
        }
        if (!("createdAt" in $$source)) {
            this["createdAt"] = "";
        }
        if (!("updatedAt" in $$source)) {
            this["updatedAt"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Theme instance from a string or object.
     */
    static createFrom($$source: any = {}): Theme {
        const $$createField3_0 = $$createType9;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("colors" in $$parsedSource) {
            $$parsedSource["colors"] = $$createField3_0($$parsedSource["colors"]);
        }
        return new Theme($$parsedSource as Partial<Theme>);
    }
}

/**
 * ThemeColorConfig 主题颜色配置（与前端 ThemeColors 接口保持一致）
 */
export class ThemeColorConfig {
    /**
     * 主题基本信息
     * 主题名称
     */
    "name": string;

    /**
     * 是否为深色主题
     */
    "dark": boolean;

    /**
     * 基础色调
     * 主背景色
     */
    "background": string;

    /**
     * 次要背景色（用于代码块交替背景）
     */
    "backgroundSecondary": string;

    /**
     * 面板背景
     */
    "surface": string;

    /**
     * 下拉菜单背景
     */
    "dropdownBackground": string;

    /**
     * 下拉菜单边框
     */
    "dropdownBorder": string;

    /**
     * 文本颜色
     * 主文本色
     */
    "foreground": string;

    /**
     * 次要文本色
     */
    "foregroundSecondary": string;

    /**
     * 注释色
     */
    "comment": string;

    /**
     * 语法高亮色 - 核心
     * 关键字
     */
    "keyword": string;

    /**
     * 字符串
     */
    "string": string;

    /**
     * 函数名
     */
    "function": string;

    /**
     * 数字
     */
    "number": string;

    /**
     * 操作符
     */
    "operator": string;

    /**
     * 变量
     */
    "variable": string;

    /**
     * 类型
     */
    "type": string;

    /**
     * 语法高亮色 - 扩展
     * 常量
     */
    "constant": string;

    /**
     * 存储类型（如 static, const）
     */
    "storage": string;

    /**
     * 参数
     */
    "parameter": string;

    /**
     * 类名
     */
    "class": string;

    /**
     * 标题（Markdown等）
     */
    "heading": string;

    /**
     * 无效内容/错误
     */
    "invalid": string;

    /**
     * 正则表达式
     */
    "regexp": string;

    /**
     * 界面元素
     * 光标
     */
    "cursor": string;

    /**
     * 选中背景
     */
    "selection": string;

    /**
     * 失焦选中背景
     */
    "selectionBlur": string;

    /**
     * 当前行高亮
     */
    "activeLine": string;

    /**
     * 行号
     */
    "lineNumber": string;

    /**
     * 活动行号颜色
     */
    "activeLineNumber": string;

    /**
     * 边框和分割线
     * 边框色
     */
    "borderColor": string;

    /**
     * 浅色边框
     */
    "borderLight": string;

    /**
     * 搜索和匹配
     * 搜索匹配
     */
    "searchMatch": string;

    /**
     * 匹配括号
     */
    "matchingBracket": string;

    /** Creates a new ThemeColorConfig instance. */
    constructor($$source: Partial<ThemeColorConfig> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("dark" in $$source)) {
            this["dark"] = false;
        }
        if (!("background" in $$source)) {
            this["background"] = "";
        }
        if (!("backgroundSecondary" in $$source)) {
            this["backgroundSecondary"] = "";
        }
        if (!("surface" in $$source)) {
            this["surface"] = "";
        }
        if (!("dropdownBackground" in $$source)) {
            this["dropdownBackground"] = "";
        }
        if (!("dropdownBorder" in $$source)) {
            this["dropdownBorder"] = "";
        }
        if (!("foreground" in $$source)) {
            this["foreground"] = "";
        }
        if (!("foregroundSecondary" in $$source)) {
            this["foregroundSecondary"] = "";
        }
        if (!("comment" in $$source)) {
            this["comment"] = "";
        }
        if (!("keyword" in $$source)) {
            this["keyword"] = "";
        }
        if (!("string" in $$source)) {
            this["string"] = "";
        }
        if (!("function" in $$source)) {
            this["function"] = "";
        }
        if (!("number" in $$source)) {
            this["number"] = "";
        }
        if (!("operator" in $$source)) {
            this["operator"] = "";
        }
        if (!("variable" in $$source)) {
            this["variable"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = "";
        }
        if (!("constant" in $$source)) {
            this["constant"] = "";
        }
        if (!("storage" in $$source)) {
            this["storage"] = "";
        }
        if (!("parameter" in $$source)) {
            this["parameter"] = "";
        }
        if (!("class" in $$source)) {
            this["class"] = "";
        }
        if (!("heading" in $$source)) {
            this["heading"] = "";
        }
        if (!("invalid" in $$source)) {
            this["invalid"] = "";
        }
        if (!("regexp" in $$source)) {
            this["regexp"] = "";
        }
        if (!("cursor" in $$source)) {
            this["cursor"] = "";
        }
        if (!("selection" in $$source)) {
            this["selection"] = "";
        }
        if (!("selectionBlur" in $$source)) {
            this["selectionBlur"] = "";
        }
        if (!("activeLine" in $$source)) {
            this["activeLine"] = "";
        }
        if (!("lineNumber" in $$source)) {
            this["lineNumber"] = "";
        }
        if (!("activeLineNumber" in $$source)) {
            this["activeLineNumber"] = "";
        }
        if (!("borderColor" in $$source)) {
            this["borderColor"] = "";
        }
        if (!("borderLight" in $$source)) {
            this["borderLight"] = "";
        }
        if (!("searchMatch" in $$source)) {
            this["searchMatch"] = "";
        }
        if (!("matchingBracket" in $$source)) {
            this["matchingBracket"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ThemeColorConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): ThemeColorConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ThemeColorConfig($$parsedSource as Partial<ThemeColorConfig>);
    }
}

/**
 * ThemeType 主题类型枚举
 */
export enum ThemeType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    ThemeTypeDark = "dark",
    ThemeTypeLight = "light",
};

/**
 * UpdateSourceType 更新源类型
 */
export enum UpdateSourceType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * UpdateSourceGithub GitHub更新源
     */
    UpdateSourceGithub = "github",

    /**
     * UpdateSourceGitea Gitea更新源
     */
    UpdateSourceGitea = "gitea",
};

/**
 * UpdatesConfig 更新设置配置
 */
export class UpdatesConfig {
    /**
     * 当前版本号
     */
    "version": string;

    /**
     * 是否自动更新
     */
    "autoUpdate": boolean;

    /**
     * 主要更新源
     */
    "primarySource": UpdateSourceType;

    /**
     * 备用更新源
     */
    "backupSource": UpdateSourceType;

    /**
     * 更新前是否备份
     */
    "backupBeforeUpdate": boolean;

    /**
     * 更新超时时间(秒)
     */
    "updateTimeout": number;

    /**
     * GitHub配置
     */
    "github": GithubConfig;

    /**
     * Gitea配置
     */
    "gitea": GiteaConfig;

    /** Creates a new UpdatesConfig instance. */
    constructor($$source: Partial<UpdatesConfig> = {}) {
        if (!("version" in $$source)) {
            this["version"] = "";
        }
        if (!("autoUpdate" in $$source)) {
            this["autoUpdate"] = false;
        }
        if (!("primarySource" in $$source)) {
            this["primarySource"] = ("" as UpdateSourceType);
        }
        if (!("backupSource" in $$source)) {
            this["backupSource"] = ("" as UpdateSourceType);
        }
        if (!("backupBeforeUpdate" in $$source)) {
            this["backupBeforeUpdate"] = false;
        }
        if (!("updateTimeout" in $$source)) {
            this["updateTimeout"] = 0;
        }
        if (!("github" in $$source)) {
            this["github"] = (new GithubConfig());
        }
        if (!("gitea" in $$source)) {
            this["gitea"] = (new GiteaConfig());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UpdatesConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): UpdatesConfig {
        const $$createField6_0 = $$createType10;
        const $$createField7_0 = $$createType11;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("github" in $$parsedSource) {
            $$parsedSource["github"] = $$createField6_0($$parsedSource["github"]);
        }
        if ("gitea" in $$parsedSource) {
            $$parsedSource["gitea"] = $$createField7_0($$parsedSource["gitea"]);
        }
        return new UpdatesConfig($$parsedSource as Partial<UpdatesConfig>);
    }
}

// Private type creation functions
const $$createType0 = GeneralConfig.createFrom;
const $$createType1 = EditingConfig.createFrom;
const $$createType2 = AppearanceConfig.createFrom;
const $$createType3 = UpdatesConfig.createFrom;
const $$createType4 = GitBackupConfig.createFrom;
const $$createType5 = ConfigMetadata.createFrom;
var $$createType6 = (function $$initCreateType6(...args): any {
    if ($$createType6 === $$initCreateType6) {
        $$createType6 = $$createType7;
    }
    return $$createType6(...args);
});
const $$createType7 = $Create.Map($Create.Any, $Create.Any);
const $$createType8 = HotkeyCombo.createFrom;
const $$createType9 = ThemeColorConfig.createFrom;
const $$createType10 = GithubConfig.createFrom;
const $$createType11 = GiteaConfig.createFrom;
