// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

/**
 * AppConfig 应用配置 - 按照前端设置页面分类组织
 */
export class AppConfig {
    /**
     * 通用设置
     */
    "general": GeneralConfig;

    /**
     * 编辑设置
     */
    "editing": EditingConfig;

    /**
     * 外观设置
     */
    "appearance": AppearanceConfig;

    /**
     * 更新设置
     */
    "updates": UpdatesConfig;

    /**
     * 配置元数据
     */
    "metadata": ConfigMetadata;

    /** Creates a new AppConfig instance. */
    constructor($$source: Partial<AppConfig> = {}) {
        if (!("general" in $$source)) {
            this["general"] = (new GeneralConfig());
        }
        if (!("editing" in $$source)) {
            this["editing"] = (new EditingConfig());
        }
        if (!("appearance" in $$source)) {
            this["appearance"] = (new AppearanceConfig());
        }
        if (!("updates" in $$source)) {
            this["updates"] = (new UpdatesConfig());
        }
        if (!("metadata" in $$source)) {
            this["metadata"] = (new ConfigMetadata());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): AppConfig {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType1;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType3;
        const $$createField4_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("general" in $$parsedSource) {
            $$parsedSource["general"] = $$createField0_0($$parsedSource["general"]);
        }
        if ("editing" in $$parsedSource) {
            $$parsedSource["editing"] = $$createField1_0($$parsedSource["editing"]);
        }
        if ("appearance" in $$parsedSource) {
            $$parsedSource["appearance"] = $$createField2_0($$parsedSource["appearance"]);
        }
        if ("updates" in $$parsedSource) {
            $$parsedSource["updates"] = $$createField3_0($$parsedSource["updates"]);
        }
        if ("metadata" in $$parsedSource) {
            $$parsedSource["metadata"] = $$createField4_0($$parsedSource["metadata"]);
        }
        return new AppConfig($$parsedSource as Partial<AppConfig>);
    }
}

/**
 * AppearanceConfig 外观设置配置
 */
export class AppearanceConfig {
    /**
     * 界面语言
     */
    "language": LanguageType;

    /**
     * 系统界面主题
     */
    "systemTheme": SystemThemeType;

    /** Creates a new AppearanceConfig instance. */
    constructor($$source: Partial<AppearanceConfig> = {}) {
        if (!("language" in $$source)) {
            this["language"] = ("" as LanguageType);
        }
        if (!("systemTheme" in $$source)) {
            this["systemTheme"] = ("" as SystemThemeType);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppearanceConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): AppearanceConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppearanceConfig($$parsedSource as Partial<AppearanceConfig>);
    }
}

/**
 * ConfigMetadata 配置元数据
 */
export class ConfigMetadata {
    /**
     * 最后更新时间
     */
    "lastUpdated": string;

    /** Creates a new ConfigMetadata instance. */
    constructor($$source: Partial<ConfigMetadata> = {}) {
        if (!("lastUpdated" in $$source)) {
            this["lastUpdated"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ConfigMetadata instance from a string or object.
     */
    static createFrom($$source: any = {}): ConfigMetadata {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ConfigMetadata($$parsedSource as Partial<ConfigMetadata>);
    }
}

/**
 * Document 表示一个文档
 */
export class Document {
    /**
     * 元数据
     */
    "meta": DocumentMeta;

    /**
     * 文档内容
     */
    "content": string;

    /** Creates a new Document instance. */
    constructor($$source: Partial<Document> = {}) {
        if (!("meta" in $$source)) {
            this["meta"] = (new DocumentMeta());
        }
        if (!("content" in $$source)) {
            this["content"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Document instance from a string or object.
     */
    static createFrom($$source: any = {}): Document {
        const $$createField0_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("meta" in $$parsedSource) {
            $$parsedSource["meta"] = $$createField0_0($$parsedSource["meta"]);
        }
        return new Document($$parsedSource as Partial<Document>);
    }
}

/**
 * DocumentMeta 文档元数据
 */
export class DocumentMeta {
    /**
     * 文档唯一标识
     */
    "id": string;

    /**
     * 文档标题
     */
    "title": string;

    /**
     * 最后更新时间
     */
    "lastUpdated": time$0.Time;

    /**
     * 创建时间
     */
    "createdAt": time$0.Time;

    /** Creates a new DocumentMeta instance. */
    constructor($$source: Partial<DocumentMeta> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("lastUpdated" in $$source)) {
            this["lastUpdated"] = null;
        }
        if (!("createdAt" in $$source)) {
            this["createdAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DocumentMeta instance from a string or object.
     */
    static createFrom($$source: any = {}): DocumentMeta {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DocumentMeta($$parsedSource as Partial<DocumentMeta>);
    }
}

/**
 * EditingConfig 编辑设置配置
 */
export class EditingConfig {
    /**
     * 字体设置
     * 字体大小
     */
    "fontSize": number;

    /**
     * 字体族
     */
    "fontFamily": string;

    /**
     * 字体粗细
     */
    "fontWeight": string;

    /**
     * 行高
     */
    "lineHeight": number;

    /**
     * Tab设置
     * 是否启用Tab缩进
     */
    "enableTabIndent": boolean;

    /**
     * Tab大小
     */
    "tabSize": number;

    /**
     * Tab类型（空格或Tab）
     */
    "tabType": TabType;

    /**
     * 保存选项
     * 自动保存延迟（毫秒）
     */
    "autoSaveDelay": number;

    /** Creates a new EditingConfig instance. */
    constructor($$source: Partial<EditingConfig> = {}) {
        if (!("fontSize" in $$source)) {
            this["fontSize"] = 0;
        }
        if (!("fontFamily" in $$source)) {
            this["fontFamily"] = "";
        }
        if (!("fontWeight" in $$source)) {
            this["fontWeight"] = "";
        }
        if (!("lineHeight" in $$source)) {
            this["lineHeight"] = 0;
        }
        if (!("enableTabIndent" in $$source)) {
            this["enableTabIndent"] = false;
        }
        if (!("tabSize" in $$source)) {
            this["tabSize"] = 0;
        }
        if (!("tabType" in $$source)) {
            this["tabType"] = ("" as TabType);
        }
        if (!("autoSaveDelay" in $$source)) {
            this["autoSaveDelay"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EditingConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): EditingConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EditingConfig($$parsedSource as Partial<EditingConfig>);
    }
}

/**
 * GeneralConfig 通用设置配置
 */
export class GeneralConfig {
    /**
     * 窗口是否置顶
     */
    "alwaysOnTop": boolean;

    /**
     * 数据存储路径
     */
    "dataPath": string;

    /**
     * 是否启用系统托盘
     */
    "enableSystemTray": boolean;

    /**
     * 全局热键设置
     * 是否启用全局热键
     */
    "enableGlobalHotkey": boolean;

    /**
     * 全局热键组合
     */
    "globalHotkey": HotkeyCombo;

    /** Creates a new GeneralConfig instance. */
    constructor($$source: Partial<GeneralConfig> = {}) {
        if (!("alwaysOnTop" in $$source)) {
            this["alwaysOnTop"] = false;
        }
        if (!("dataPath" in $$source)) {
            this["dataPath"] = "";
        }
        if (!("enableSystemTray" in $$source)) {
            this["enableSystemTray"] = false;
        }
        if (!("enableGlobalHotkey" in $$source)) {
            this["enableGlobalHotkey"] = false;
        }
        if (!("globalHotkey" in $$source)) {
            this["globalHotkey"] = (new HotkeyCombo());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GeneralConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GeneralConfig {
        const $$createField4_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("globalHotkey" in $$parsedSource) {
            $$parsedSource["globalHotkey"] = $$createField4_0($$parsedSource["globalHotkey"]);
        }
        return new GeneralConfig($$parsedSource as Partial<GeneralConfig>);
    }
}

/**
 * HotkeyCombo 热键组合定义
 */
export class HotkeyCombo {
    /**
     * Ctrl键
     */
    "ctrl": boolean;

    /**
     * Shift键
     */
    "shift": boolean;

    /**
     * Alt键
     */
    "alt": boolean;

    /**
     * Win键
     */
    "win": boolean;

    /**
     * 主键（如 'X', 'F1' 等）
     */
    "key": string;

    /** Creates a new HotkeyCombo instance. */
    constructor($$source: Partial<HotkeyCombo> = {}) {
        if (!("ctrl" in $$source)) {
            this["ctrl"] = false;
        }
        if (!("shift" in $$source)) {
            this["shift"] = false;
        }
        if (!("alt" in $$source)) {
            this["alt"] = false;
        }
        if (!("win" in $$source)) {
            this["win"] = false;
        }
        if (!("key" in $$source)) {
            this["key"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new HotkeyCombo instance from a string or object.
     */
    static createFrom($$source: any = {}): HotkeyCombo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new HotkeyCombo($$parsedSource as Partial<HotkeyCombo>);
    }
}

/**
 * KeyBinding 单个快捷键绑定
 */
export class KeyBinding {
    /**
     * 快捷键唯一标识
     */
    "id": string;

    /**
     * 快捷键动作
     */
    "action": KeyBindingAction;

    /**
     * 快捷键分类
     */
    "category": KeyBindingCategory;

    /**
     * 快捷键作用域
     */
    "scope": KeyBindingScope;

    /**
     * 快捷键组合（如 "Mod-f", "Ctrl-Shift-p"）
     */
    "key": string;

    /**
     * 是否启用
     */
    "enabled": boolean;

    /**
     * 是否为默认快捷键
     */
    "isDefault": boolean;

    /** Creates a new KeyBinding instance. */
    constructor($$source: Partial<KeyBinding> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("action" in $$source)) {
            this["action"] = ("" as KeyBindingAction);
        }
        if (!("category" in $$source)) {
            this["category"] = ("" as KeyBindingCategory);
        }
        if (!("scope" in $$source)) {
            this["scope"] = ("" as KeyBindingScope);
        }
        if (!("key" in $$source)) {
            this["key"] = "";
        }
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }
        if (!("isDefault" in $$source)) {
            this["isDefault"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new KeyBinding instance from a string or object.
     */
    static createFrom($$source: any = {}): KeyBinding {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new KeyBinding($$parsedSource as Partial<KeyBinding>);
    }
}

/**
 * KeyBindingAction 快捷键动作类型
 */
export enum KeyBindingAction {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 搜索相关
     * 显示搜索
     */
    ActionShowSearch = "showSearch",

    /**
     * 隐藏搜索
     */
    ActionHideSearch = "hideSearch",

    /**
     * 查找下一个
     */
    ActionFindNext = "findNext",

    /**
     * 查找上一个
     */
    ActionFindPrevious = "findPrevious",

    /**
     * 显示替换
     */
    ActionShowReplace = "showReplace",

    /**
     * 替换下一个
     */
    ActionReplaceNext = "replaceNext",

    /**
     * 替换全部
     */
    ActionReplaceAll = "replaceAll",

    /**
     * 切换大小写匹配
     */
    ActionToggleCase = "toggleCase",

    /**
     * 切换全词匹配
     */
    ActionToggleWholeWord = "toggleWholeWord",

    /**
     * 切换正则表达式
     */
    ActionToggleRegex = "toggleRegex",

    /**
     * 编辑相关
     * 全选
     */
    ActionSelectAll = "selectAll",

    /**
     * 复制
     */
    ActionCopy = "copy",

    /**
     * 剪切
     */
    ActionCut = "cut",

    /**
     * 粘贴
     */
    ActionPaste = "paste",

    /**
     * 撤销
     */
    ActionUndo = "undo",

    /**
     * 重做
     */
    ActionRedo = "redo",

    /**
     * 复制行
     */
    ActionDuplicateLine = "duplicateLine",

    /**
     * 删除行
     */
    ActionDeleteLine = "deleteLine",

    /**
     * 上移行
     */
    ActionMoveLineUp = "moveLineUp",

    /**
     * 下移行
     */
    ActionMoveLineDown = "moveLineDown",

    /**
     * 切换注释
     */
    ActionToggleComment = "toggleComment",

    /**
     * 缩进
     */
    ActionIndent = "indent",

    /**
     * 取消缩进
     */
    ActionOutdent = "outdent",

    /**
     * 代码块相关
     * 新建代码块
     */
    ActionNewCodeBlock = "newCodeBlock",

    /**
     * 删除代码块
     */
    ActionDeleteCodeBlock = "deleteCodeBlock",

    /**
     * 选择代码块
     */
    ActionSelectCodeBlock = "selectCodeBlock",

    /**
     * 格式化代码
     */
    ActionFormatCode = "formatCode",

    /**
     * 更改语言
     */
    ActionChangeLanguage = "changeLanguage",

    /**
     * 导航相关
     * 跳转到行
     */
    ActionGoToLine = "goToLine",

    /**
     * 折叠所有
     */
    ActionFoldAll = "foldAll",

    /**
     * 展开所有
     */
    ActionUnfoldAll = "unfoldAll",

    /**
     * 切换折叠
     */
    ActionToggleFold = "toggleFold",

    /**
     * 视图相关
     * 放大
     */
    ActionZoomIn = "zoomIn",

    /**
     * 缩小
     */
    ActionZoomOut = "zoomOut",

    /**
     * 重置缩放
     */
    ActionResetZoom = "resetZoom",

    /**
     * 切换小地图
     */
    ActionToggleMinimap = "toggleMinimap",

    /**
     * 切换行号
     */
    ActionToggleLineNumbers = "toggleLineNumbers",

    /**
     * 文件相关
     * 保存
     */
    ActionSave = "save",
};

/**
 * KeyBindingCategory 快捷键分类
 */
export enum KeyBindingCategory {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 搜索相关
     */
    CategorySearch = "search",

    /**
     * 编辑相关
     */
    CategoryEdit = "edit",

    /**
     * 代码块相关
     */
    CategoryCodeBlock = "codeblock",

    /**
     * 导航相关
     */
    CategoryNavigation = "navigation",

    /**
     * 视图相关
     */
    CategoryView = "view",

    /**
     * 文件相关
     */
    CategoryFile = "file",

    /**
     * 应用相关
     */
    CategoryApp = "app",
};

/**
 * KeyBindingConfig 快捷键配置
 */
export class KeyBindingConfig {
    /**
     * 快捷键列表
     */
    "keyBindings": KeyBinding[];

    /**
     * 配置元数据
     */
    "metadata": KeyBindingMetadata;

    /** Creates a new KeyBindingConfig instance. */
    constructor($$source: Partial<KeyBindingConfig> = {}) {
        if (!("keyBindings" in $$source)) {
            this["keyBindings"] = [];
        }
        if (!("metadata" in $$source)) {
            this["metadata"] = (new KeyBindingMetadata());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new KeyBindingConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): KeyBindingConfig {
        const $$createField0_0 = $$createType8;
        const $$createField1_0 = $$createType9;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("keyBindings" in $$parsedSource) {
            $$parsedSource["keyBindings"] = $$createField0_0($$parsedSource["keyBindings"]);
        }
        if ("metadata" in $$parsedSource) {
            $$parsedSource["metadata"] = $$createField1_0($$parsedSource["metadata"]);
        }
        return new KeyBindingConfig($$parsedSource as Partial<KeyBindingConfig>);
    }
}

/**
 * KeyBindingMetadata 快捷键配置元数据
 */
export class KeyBindingMetadata {
    /**
     * 最后更新时间
     */
    "lastUpdated": string;

    /** Creates a new KeyBindingMetadata instance. */
    constructor($$source: Partial<KeyBindingMetadata> = {}) {
        if (!("lastUpdated" in $$source)) {
            this["lastUpdated"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new KeyBindingMetadata instance from a string or object.
     */
    static createFrom($$source: any = {}): KeyBindingMetadata {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new KeyBindingMetadata($$parsedSource as Partial<KeyBindingMetadata>);
    }
}

/**
 * KeyBindingScope 快捷键作用域
 */
export enum KeyBindingScope {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * 全局作用域
     */
    ScopeGlobal = "global",

    /**
     * 编辑器作用域
     */
    ScopeEditor = "editor",

    /**
     * 搜索面板作用域
     */
    ScopeSearch = "search",
};

/**
 * LanguageType 语言类型定义
 */
export enum LanguageType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * LangZhCN 中文简体
     */
    LangZhCN = "zh-CN",

    /**
     * LangEnUS 英文-美国
     */
    LangEnUS = "en-US",
};

/**
 * SystemThemeType 系统主题类型定义
 */
export enum SystemThemeType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * SystemThemeDark 深色系统主题
     */
    SystemThemeDark = "dark",

    /**
     * SystemThemeLight 浅色系统主题
     */
    SystemThemeLight = "light",

    /**
     * SystemThemeAuto 跟随系统主题
     */
    SystemThemeAuto = "auto",
};

/**
 * TabType 定义了制表符类型
 */
export enum TabType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * TabTypeSpaces 使用空格作为制表符
     */
    TabTypeSpaces = "spaces",

    /**
     * TabTypeTab 使用Tab作为制表符
     */
    TabTypeTab = "tab",
};

/**
 * UpdatesConfig 更新设置配置
 */
export class UpdatesConfig {

    /** Creates a new UpdatesConfig instance. */
    constructor($$source: Partial<UpdatesConfig> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UpdatesConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): UpdatesConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UpdatesConfig($$parsedSource as Partial<UpdatesConfig>);
    }
}

// Private type creation functions
const $$createType0 = GeneralConfig.createFrom;
const $$createType1 = EditingConfig.createFrom;
const $$createType2 = AppearanceConfig.createFrom;
const $$createType3 = UpdatesConfig.createFrom;
const $$createType4 = ConfigMetadata.createFrom;
const $$createType5 = DocumentMeta.createFrom;
const $$createType6 = HotkeyCombo.createFrom;
const $$createType7 = KeyBinding.createFrom;
const $$createType8 = $Create.Array($$createType7);
const $$createType9 = KeyBindingMetadata.createFrom;
