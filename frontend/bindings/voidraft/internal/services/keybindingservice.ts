// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * KeyBindingService 快捷键管理服务
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../models/models.js";

/**
 * DisableKeyBinding 禁用快捷键
 */
export function DisableKeyBinding(action: models$0.KeyBindingAction): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1594003006, action) as any;
    return $resultPromise;
}

/**
 * EnableKeyBinding 启用快捷键
 */
export function EnableKeyBinding(action: models$0.KeyBindingAction): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1462644129, action) as any;
    return $resultPromise;
}

/**
 * ExportKeyBindings 导出快捷键配置
 */
export function ExportKeyBindings(): Promise<models$0.KeyBinding[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4089030977) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetAllKeyBindings 获取所有快捷键配置
 */
export function GetAllKeyBindings(): Promise<models$0.KeyBinding[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1633502882) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingByAction 根据动作获取快捷键
 */
export function GetKeyBindingByAction(action: models$0.KeyBindingAction): Promise<models$0.KeyBinding | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(752637777, action) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingCategories 获取所有快捷键分类
 */
export function GetKeyBindingCategories(): Promise<models$0.KeyBindingCategory[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3141399810) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingConfig 获取完整快捷键配置
 */
export function GetKeyBindingConfig(): Promise<models$0.KeyBindingConfig | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3804318356) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType5($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingScopes 获取所有快捷键作用域
 */
export function GetKeyBindingScopes(): Promise<models$0.KeyBindingScope[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2984736455) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType6($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingsByCategory 根据分类获取快捷键
 */
export function GetKeyBindingsByCategory(category: models$0.KeyBindingCategory): Promise<models$0.KeyBinding[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1686146606, category) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetKeyBindingsByScope 根据作用域获取快捷键
 */
export function GetKeyBindingsByScope(scope: models$0.KeyBindingScope): Promise<models$0.KeyBinding[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1179712594, scope) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ImportKeyBindings 导入快捷键配置
 */
export function ImportKeyBindings(keyBindings: models$0.KeyBinding[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(642201520, keyBindings) as any;
    return $resultPromise;
}

/**
 * ResetAllKeyBindings 重置所有快捷键到默认值
 */
export function ResetAllKeyBindings(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2771372645) as any;
    return $resultPromise;
}

/**
 * ResetKeyBinding 重置快捷键到默认值
 */
export function ResetKeyBinding(action: models$0.KeyBindingAction): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3466323405, action) as any;
    return $resultPromise;
}

/**
 * UpdateKeyBinding 更新快捷键
 */
export function UpdateKeyBinding(action: models$0.KeyBindingAction, newKey: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1469368983, action, newKey) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.KeyBinding.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Nullable($$createType0);
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = models$0.KeyBindingConfig.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = $Create.Array($Create.Any);
