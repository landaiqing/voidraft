// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * ThemeService 主题服务
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../../github.com/wailsapp/wails/v3/pkg/application/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../models/models.js";

/**
 * CreateTheme 创建新主题
 */
export function CreateTheme(theme: models$0.Theme | null): Promise<models$0.Theme | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3274757686, theme) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetAllThemes 获取所有主题
 */
export function GetAllThemes(): Promise<(models$0.Theme | null)[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2425053076) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetDefaultThemes 获取默认主题
 */
export function GetDefaultThemes(): Promise<{ [_: string]: models$0.Theme | null }> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3801788118) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetThemeByType 根据类型获取默认主题
 */
export function GetThemeByType(themeType: models$0.ThemeType): Promise<models$0.Theme | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1680465265, themeType) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ResetThemeColors 重置主题颜色为默认值
 */
export function ResetThemeColors(themeType: models$0.ThemeType): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(342461245, themeType) as any;
    return $resultPromise;
}

/**
 * ServiceShutdown 服务关闭
 */
export function ServiceShutdown(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1676749034) as any;
    return $resultPromise;
}

/**
 * ServiceStartup 服务启动时初始化
 */
export function ServiceStartup(options: application$0.ServiceOptions): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2915959937, options) as any;
    return $resultPromise;
}

/**
 * UpdateThemeColors 更新主题颜色
 */
export function UpdateThemeColors(themeType: models$0.ThemeType, colors: models$0.ThemeColorConfig): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2750902529, themeType, colors) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.Theme.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $Create.Map($Create.Any, $$createType1);
