// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * ConfigService 提供配置管理功能
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../../models/models.js";

/**
 * GetConfig 获取完整应用配置
 */
export function GetConfig(): Promise<models$0.AppConfig | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3332910023) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetConfigPath 获取当前配置文件路径
 */
export function GetConfigPath(): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2145796624) as any;
    return $resultPromise;
}

/**
 * GetEditorConfig 获取编辑器配置
 */
export function GetEditorConfig(): Promise<models$0.EditorConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3738882774) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetLanguage 获取当前语言设置
 */
export function GetLanguage(): Promise<models$0.LanguageType> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1762264443) as any;
    return $resultPromise;
}

/**
 * GetMetadata 获取配置元数据
 */
export function GetMetadata(): Promise<models$0.ConfigMetadata> & { cancel(): void } {
    let $resultPromise = $Call.ByID(356327488) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetPaths 获取路径配置
 */
export function GetPaths(): Promise<models$0.PathsConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1115810463) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ResetConfig 重置为默认配置
 */
export function ResetConfig(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2265390548) as any;
    return $resultPromise;
}

/**
 * SaveConfig 保存完整应用配置
 */
export function SaveConfig(config: models$0.AppConfig | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2710445504, config) as any;
    return $resultPromise;
}

/**
 * SetLanguage 设置语言
 */
export function SetLanguage(language: models$0.LanguageType): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2553541807, language) as any;
    return $resultPromise;
}

/**
 * UpdateConfigPath 更新配置文件路径
 */
export function UpdateConfigPath(newPath: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(251712339, newPath) as any;
    return $resultPromise;
}

/**
 * UpdateEditorConfig 更新编辑器配置
 */
export function UpdateEditorConfig(editorConfig: models$0.EditorConfig): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(420530601, editorConfig) as any;
    return $resultPromise;
}

/**
 * UpdateMetadata 更新配置元数据
 */
export function UpdateMetadata(metadata: models$0.ConfigMetadata): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1687760751, metadata) as any;
    return $resultPromise;
}

/**
 * UpdatePaths 更新路径配置
 */
export function UpdatePaths(paths: models$0.PathsConfig): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3466187518, paths) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = models$0.AppConfig.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = models$0.EditorConfig.createFrom;
const $$createType3 = models$0.ConfigMetadata.createFrom;
const $$createType4 = models$0.PathsConfig.createFrom;
