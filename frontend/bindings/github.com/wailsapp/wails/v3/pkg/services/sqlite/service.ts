// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../application/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export {
    ExecContext as Execute,
    QueryContext as Query
};

import { Stmt } from "./stmt.js";

/**
 * Prepare creates a prepared statement for later queries or executions.
 * Multiple queries or executions may be run concurrently from the returned statement.
 *
 * The caller must call the statement's Close method when it is no longer needed.
 * Statements are closed automatically
 * when the connection they are associated with is closed.
 *
 * Prepare supports early cancellation.
 */
export function Prepare(query: string): Promise<Stmt | null> & { cancel(): void } {
    const promise = PrepareContext(query);
    const wrapper: any = (promise.then(function (id) {
        return id == null ? null : new Stmt(
            ClosePrepared.bind(null, id),
            ExecPrepared.bind(null, id),
            QueryPrepared.bind(null, id));
    }));
    wrapper.cancel = promise.cancel;
    return wrapper;
}

/**
 * Close closes the current database connection if one is open, otherwise has no effect.
 * Additionally, Close closes all open prepared statements associated to the connection.
 * 
 * Even when a non-nil error is returned,
 * the database service is left in a consistent state,
 * ready for a call to [Service.Open].
 */
export function Close(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1888105376) as any;
    return $resultPromise;
}

/**
 * ClosePrepared closes a prepared statement
 * obtained with [Service.Prepare] or [Service.PrepareContext].
 * ClosePrepared is idempotent:
 * it has no effect on prepared statements that are already closed.
 */
function ClosePrepared(stmt: $models.Stmt | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2526200629, stmt) as any;
    return $resultPromise;
}

/**
 * Configure changes the database service configuration.
 * The connection state at call time is preserved.
 * Consumers will need to call [Service.Open] manually after Configure
 * in order to reconnect with the new configuration.
 * 
 * See [NewWithConfig] for details on configuration.
 */
export function Configure(config: $models.Config | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1939578712, config) as any;
    return $resultPromise;
}

/**
 * ExecContext executes a query without returning any rows.
 * It supports early cancellation.
 */
function ExecContext(query: string, ...args: any[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(674944556, query, args) as any;
    return $resultPromise;
}

/**
 * ExecPrepared executes a prepared statement
 * obtained with [Service.Prepare] or [Service.PrepareContext]
 * without returning any rows.
 * It supports early cancellation.
 */
function ExecPrepared(stmt: $models.Stmt | null, ...args: any[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2086877656, stmt, args) as any;
    return $resultPromise;
}

/**
 * Execute executes a query without returning any rows.
 */
export function Execute(query: string, ...args: any[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3811930203, query, args) as any;
    return $resultPromise;
}

/**
 * Open validates the current configuration,
 * closes the current connection if one is present,
 * then opens and validates a new connection.
 * 
 * Even when a non-nil error is returned,
 * the database service is left in a consistent state,
 * ready for a new call to Open.
 */
export function Open(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2012175612) as any;
    return $resultPromise;
}

/**
 * Prepare creates a prepared statement for later queries or executions.
 * Multiple queries or executions may be run concurrently from the returned statement.
 * 
 * The caller should call the statement's Close method when it is no longer needed.
 * Statements are closed automatically
 * when the connection they are associated with is closed.
 */
export function Prepare(query: string): Promise<$models.Stmt | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1801965143, query) as any;
    return $resultPromise;
}

/**
 * PrepareContext creates a prepared statement for later queries or executions.
 * Multiple queries or executions may be run concurrently from the returned statement.
 * 
 * The caller must call the statement's Close method when it is no longer needed.
 * Statements are closed automatically
 * when the connection they are associated with is closed.
 * 
 * PrepareContext supports early cancellation.
 */
function PrepareContext(query: string): Promise<$models.Stmt | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(570941694, query) as any;
    return $resultPromise;
}

/**
 * Query executes a query and returns a slice of key-value records,
 * one per row, with column names as keys.
 */
export function Query(query: string, ...args: any[]): Promise<$models.Rows> & { cancel(): void } {
    let $resultPromise = $Call.ByID(860757720, query, args) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * QueryContext executes a query and returns a slice of key-value records,
 * one per row, with column names as keys.
 * It supports early cancellation, returning the slice of results fetched so far.
 */
function QueryContext(query: string, ...args: any[]): Promise<$models.Rows> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4115542347, query, args) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * QueryPrepared executes a prepared statement
 * obtained with [Service.Prepare] or [Service.PrepareContext]
 * and returns a slice of key-value records, one per row, with column names as keys.
 * It supports early cancellation, returning the slice of results fetched so far.
 */
function QueryPrepared(stmt: $models.Stmt | null, ...args: any[]): Promise<$models.Rows> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3885083725, stmt, args) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ServiceName returns the name of the plugin.
 * You should use the go module format e.g. github.com/myuser/myplugin
 */
export function ServiceName(): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1637123084) as any;
    return $resultPromise;
}

/**
 * ServiceShutdown closes the database connection.
 * It returns a non-nil error in case of failures.
 */
export function ServiceShutdown(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3650435925) as any;
    return $resultPromise;
}

/**
 * ServiceStartup opens the database connection.
 * It returns a non-nil error in case of failures.
 */
export function ServiceStartup(options: application$0.ServiceOptions): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1113159936, options) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Array($$createType0);
